package matcher

import (
	"strconv"
	"strings"
	"unicode"
)

type RegexMatcher struct {
	pattern  string
	captures [][]int
}

func NewRegexMatcher(pattern string) (*RegexMatcher, error) {
	return &RegexMatcher{pattern: pattern}, nil
}

func (rm *RegexMatcher) Match(text []byte, pattern string) bool {
	rm.captures = nil
	return rm.matchRegex(text, []byte(pattern), 0, 0)
}

func (rm *RegexMatcher) matchRegex(text []byte, pattern []byte, textIdx, patIdx int) bool {
	if patIdx == len(pattern) {
		return textIdx == len(text)
	}

	if patIdx+1 < len(pattern) && pattern[patIdx+1] == '*' {
		return rm.matchStar(text, pattern, textIdx, patIdx)
	}

	if patIdx+1 < len(pattern) && pattern[patIdx+1] == '+' {
		return rm.matchPlus(text, pattern, textIdx, patIdx)
	}

	if patIdx+1 < len(pattern) && pattern[patIdx+1] == '?' {
		return rm.matchOptional(text, pattern, textIdx, patIdx)
	}

	if pattern[patIdx] == '(' {
		return rm.handleCapturingGroup(text, pattern, textIdx, patIdx)
	}

	if pattern[patIdx] == '[' {
		return rm.handleCharacterClass(text, pattern, textIdx, patIdx)
	}

	if pattern[patIdx] == '^' {
		return textIdx == 0 && rm.matchRegex(text, pattern, textIdx, patIdx+1)
	}

	if pattern[patIdx] == '$' {
		return textIdx == len(text) && rm.matchRegex(text, pattern, textIdx, patIdx+1)
	}

	if pattern[patIdx] == '\\' && patIdx+1 < len(pattern) {
		return rm.handleEscapedChar(text, pattern, textIdx, patIdx)
	}

	if pattern[patIdx] == '{' {
		return rm.handleQuantifier(text, pattern, textIdx, patIdx)
	}

	if textIdx < len(text) {
        if pattern[patIdx] == '.' {
            return rm.matchRegex(text, pattern, textIdx+1, patIdx+1)
        }
        if pattern[patIdx] == text[textIdx] {
            return rm.matchRegex(text, pattern, textIdx+1, patIdx+1)
        }
    }
	
	
	

	return false
}

func (rm *RegexMatcher) matchStar(text []byte, pattern []byte, textIdx, patIdx int) bool {
	for i := 0; ; i++ {
		if rm.matchRegex(text, pattern, textIdx+i, patIdx+2) {
			return true
		}
		if textIdx+i == len(text) || (pattern[patIdx] != '.' && pattern[patIdx] != text[textIdx+i]) {
			break
		}
	}
	return false
}

func (rm *RegexMatcher) matchPlus(text []byte, pattern []byte, textIdx, patIdx int) bool {
	if textIdx == len(text) || (pattern[patIdx] != '.' && pattern[patIdx] != text[textIdx]) {
		return false
	}
	return rm.matchStar(text, pattern, textIdx+1, patIdx)
}

func (rm *RegexMatcher) matchOptional(text []byte, pattern []byte, textIdx, patIdx int) bool {
	if rm.matchRegex(text, pattern, textIdx, patIdx+2) {
		return true
	}
	if textIdx < len(text) && (pattern[patIdx] == '.' || pattern[patIdx] == text[textIdx]) {
		return rm.matchRegex(text, pattern, textIdx+1, patIdx+2)
	}
	return false
}

func (rm *RegexMatcher) handleCapturingGroup(text []byte, pattern []byte, textIdx, patIdx int) bool {
    closingParen := rm.findClosingParen(pattern, patIdx)
    if closingParen == -1 {
        return false
    }

    subPattern := pattern[patIdx+1 : closingParen]
    for i := 0; i <= len(text)-textIdx; i++ {
        if rm.matchRegex(text[textIdx:textIdx+i], subPattern, 0, 0) {
            captureStart := len(rm.captures)
            rm.captures = append(rm.captures, []int{textIdx, textIdx + i})
            if rm.matchRegex(text, pattern, textIdx+i, closingParen+1) {
                return true
            }
            rm.captures = rm.captures[:captureStart]
        }
    }
    return false
}


func (rm *RegexMatcher) handleCharacterClass(text []byte, pattern []byte, textIdx, patIdx int) bool {
    closingBracket := rm.findClosingBracket(pattern, patIdx)
    if closingBracket == -1 {
        return false
    }

    if textIdx == len(text) {
        return false
    }

    isNegative := pattern[patIdx+1] == '^'
    start := patIdx + 1
    if isNegative {
        start++
    }

    matched := false
    for i := start; i < closingBracket; i++ {
        if pattern[i] == '-' && i > start && i < closingBracket-1 {
            if text[textIdx] >= pattern[i-1] && text[textIdx] <= pattern[i+1] {
                matched = true
                break
            }
            i++
        } else if pattern[i] == text[textIdx] {
            matched = true
            break
        }
    }

    if isNegative {
        matched = !matched
    }

    if matched {
        return rm.matchRegex(text, pattern, textIdx+1, closingBracket+1)
    }

    return false
}

func (rm *RegexMatcher) handleEscapedChar(text []byte, pattern []byte, textIdx, patIdx int) bool {
	if patIdx+1 >= len(pattern) {
		return false
	}

	escapedChar := pattern[patIdx+1]
	if textIdx >= len(text) {
		return false
	}

	switch escapedChar {
	case 'd':
		if !unicode.IsDigit(rune(text[textIdx])) {
			return false
		}
	case 'D':
		if unicode.IsDigit(rune(text[textIdx])) {
			return false
		}
	case 'w':
		if !rm.isWord(text[textIdx]) {
			return false
		}
	case 'W':
		if rm.isWord(text[textIdx]) {
			return false
		}
	case 's':
		if !unicode.IsSpace(rune(text[textIdx])) {
			return false
		}
	case 'S':
		if unicode.IsSpace(rune(text[textIdx])) {
			return false
		}
	default:
		if escapedChar >= '1' && escapedChar <= '9' {
			return rm.handleBackreference(text, pattern, textIdx, patIdx)
		}
		if text[textIdx] != escapedChar {
			return false
		}
	}

	return rm.matchRegex(text, pattern, textIdx+1, patIdx+2)
}

func (rm *RegexMatcher) handleQuantifier(text []byte, pattern []byte, textIdx, patIdx int) bool {
    closingBrace := rm.findClosingBrace(pattern, patIdx)
    if closingBrace == -1 {
        return false
    }

    quantifier := string(pattern[patIdx+1 : closingBrace])
    min, max, err := rm.parseQuantifier(quantifier)
    if err != nil {
        return false
    }

    if min == max {
        // Exact count
        for i := 0; i < min; i++ {
            if textIdx+i >= len(text) || (pattern[patIdx-1] != '.' && pattern[patIdx-1] != text[textIdx+i]) {
                return false
            }
        }
        return rm.matchRegex(text, pattern, textIdx+min, closingBrace+1)
    }

    for i := 0; i <= max && textIdx+i <= len(text); i++ {
        if i >= min && rm.matchRegex(text, pattern, textIdx+i, closingBrace+1) {
            return true
        }
        if textIdx+i == len(text) || (pattern[patIdx-1] != '.' && pattern[patIdx-1] != text[textIdx+i]) {
            break
        }
    }

    return false
}



func (rm *RegexMatcher) handleBackreference(text []byte, pattern []byte, textIdx, patIdx int) bool {
    groupNum := int(pattern[patIdx+1] - '0')
    if groupNum <= 0 || groupNum > len(rm.captures) {
        return false
    }

    capture := rm.captures[groupNum-1]
    captureLen := capture[1] - capture[0]
    if textIdx+captureLen > len(text) {
        return false
    }

    for i := 0; i < captureLen; i++ {
        if text[textIdx+i] != text[capture[0]+i] {
            return false
        }
    }

    return rm.matchRegex(text, pattern, textIdx+captureLen, patIdx+2)
}




func (rm *RegexMatcher) findClosingParen(pattern []byte, start int) int {
	count := 1
	for i := start + 1; i < len(pattern); i++ {
		if pattern[i] == '(' {
			count++
		} else if pattern[i] == ')' {
			count--
			if count == 0 {
				return i
			}
		}
	}
	return -1
}

func (rm *RegexMatcher) findClosingBracket(pattern []byte, start int) int {
	for i := start + 1; i < len(pattern); i++ {
		if pattern[i] == ']' {
			return i
		}
	}
	return -1
}

func (rm *RegexMatcher) findClosingBrace(pattern []byte, start int) int {
    for i := start + 1; i < len(pattern); i++ {
        if pattern[i] == '}' {
            return i
        }
    }
    return -1
}

func (rm *RegexMatcher) parseQuantifier(quantifier string) (int, int, error) {
    parts := strings.Split(quantifier, ",")
    if len(parts) == 1 {
        n, err := strconv.Atoi(parts[0])
        return n, n, err
    }
    min, err := strconv.Atoi(parts[0])
    if err != nil {
        return 0, 0, err
    }
    if parts[1] == "" {
        return min, 1<<31 - 1, nil
    }
    max, err := strconv.Atoi(parts[1])
    return min, max, err
}


func (rm *RegexMatcher) isWord(c byte) bool {
	return unicode.IsLetter(rune(c)) || unicode.IsDigit(rune(c)) || c == '_'
}
